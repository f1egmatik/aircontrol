esphome:
  name: aircontrol
  platform: ESP8266
  board: nodemcuv2
  on_boot:
    then:
      - switch.turn_on: autocontrol_sw

wifi:
  # Учетные данные Wi-Fi
  ssid: !secret wifi_ssid
  password: !secret wifi_pass

  # Включение резервной точки доступа (captive portal) на случай сбоя подключения к Wi-Fi
  ap:
    ssid: "Aircontrol Fallback Hotspot"
    password: "YHhbSejlDaIw"

captive_portal:

# Раскомментируйте строки ниже, для включения встроенного WEB-сервера
#web_server:
#  port: 80

# Включение ведения журнала
logger:
  # Необходимо для отключения журналирования через UART0
  baud_rate: 0

# Включение Home Assistant API
api:
  password: "esphome"

ota:
  password: "esphome"


# Выбор подключенного датчика
# Раскомментируйте необходимую строку
#
<<: !include common/mhz19.yaml
#<<: !include common/dht_am2302.yaml


# Не обязательный текстовый сенсор, отображает текущий режим работы вентилятора
text_sensor:
  - platform: template
    name: "Fan speed"
    id: fanspeed
    icon: "mdi:fan"


# Настройки выходов
output:
  # Выход Реле 1
  - platform: gpio
    id: relay_1
    pin:
      number: $pin_relay1
      mode: OUTPUT
      inverted: true

  # Выход Реле 2
  - platform: gpio
    id: relay_2
    pin:
      number: $pin_relay2
      mode: OUTPUT
      inverted: true

  # Фиктивный выход для переключения скоростей вентилятора
  - platform: template
    type: float
    id: fan_speed
    write_action:
      - if:
          condition:
            lambda: return (state < .2);
          then:
            - output.turn_off: relay_1
            - output.turn_off: relay_2
            - lambda: |-
                id(fanspeed).publish_state("0");
      - if:
          condition:
            lambda: return ((state >= .2) && (state < .4));
          then:
            - output.turn_on: relay_1
            - output.turn_off: relay_2
            - lambda: |-
                id(fanspeed).publish_state("1");
      - if:
          condition:
            lambda: return ((state >= .4) && (state < .7));
          then:
            - output.turn_off: relay_1
            - output.turn_on: relay_2
            - lambda: |-
                id(fanspeed).publish_state("2");
      - if:
          condition:
            lambda: return (state >= 0.7);
          then:
            - output.turn_on: relay_1
            - output.turn_on: relay_2
            - lambda: |-
                id(fanspeed).publish_state("3");


# Скрипты автоматизации
script:

  # Вентилятор выключен
  - id: fan_auto_state_off
    then:
      - if:
          condition:
            switch.is_on: autocontrol_sw
          then:
            - if:
                condition:
                  not:
                    - script.is_running: timeout
                then:
                  - fan.turn_off: $fan_id
      
  # Первая скорость
  - id: fan_auto_state_1
    then:
      - if:
          condition:
            switch.is_on: autocontrol_sw
          then:
            - if:
                condition:
                  - script.is_running: timeout
                then:
                  - delay: 20ms
                else:
                  - fan.turn_on:
                      id: $fan_id
                      speed: LOW
                  - lambda: |-
                      id(fanspeed).publish_state("1");

  # Втарая скорость
  - id: fan_auto_state_2
    then:
      - if:
          condition:
            switch.is_on: autocontrol_sw
          then:
            - if:
                condition:
                  - script.is_running: timeout
                then:
                  - delay: 20ms
                else:
                  - fan.turn_on:
                      id: $fan_id
                      speed: MEDIUM

  # Третья скорость
  - id: fan_auto_state_3
    then:
      - if:
          condition:
            switch.is_on: autocontrol_sw
          then:
            - if:
                condition:
                  - script.is_running: timeout
                then:
                  - delay: 20ms
                else:
                  - fan.turn_on:
                      id: $fan_id
                      speed: HIGH
            

  # ВКЛ 30 минут
  - id: fan_manual_state_on
    then:
      - if:
          condition:
            - script.is_running: timeout
          then:
            - script.stop: timeout
      - switch.template.publish:
          id: autocontrol_sw
          state: ON
      - fan.turn_on:
          id: $fan_id
          speed: HIGH
      - script.execute: timeout

  # ВЫКЛ 30 минут
  - id: fan_manual_state_off
    then:
      - if:
          condition:
            - script.is_running: timeout
          then:
            - script.stop: timeout
      - switch.template.publish:
          id: autocontrol_sw
          state: ON
      - fan.turn_off: $fan_id
      - script.execute: timeout

  # Таймер 30 минут
  - id: timeout
    then:
      - delay: 30min


# Выполнение скриптов по условиям 
interval:
  - interval: 1s
    then:
      - if:
          condition:
            and:
              not:
                - switch.is_on: autocontrol_sw
                - script.is_running: timeout
          then:
            - if:
                condition:
                  sensor.in_range:
                    id: $source_sensor_id
                    below: $fan_speed_1
                then:
                  - script.execute: fan_auto_state_off
                else:
                  - if:
                      condition:
                        sensor.in_range:
                          id: $source_sensor_id
                          above: $fan_speed_3
                      then:
                        - script.execute: fan_auto_state_3
                      else:
                        - if:
                            condition:
                              sensor.in_range:
                                id: $source_sensor_id
                                above: $fan_speed_2
                            then:
                              - script.execute: fan_auto_state_2
                            else:
                              - script.execute: fan_auto_state_1
      
      


switch:
  # Переключатель ручного управления
  - platform: template
    id: autocontrol_sw
    name: "Autocontrol"
    icon: "mdi:fan-auto"
    turn_on_action:
      - switch.template.publish:
          id: autocontrol_sw
          state: ON
      - script.stop: timeout
    turn_off_action:
      - switch.template.publish:
          id: autocontrol_sw
          state: OFF
          
  # Переключатель режима продувки
  - platform: template
    id: blow
    name: "Blow"
    icon: "mdi:fan-speed-3"
    turn_on_action:
      - script.execute: fan_manual_state_on
      - switch.template.publish:
          id: blow
          state: ON
      #- script.stop: timeout
    turn_off_action:
      - script.execute: fan_manual_state_off
      - switch.template.publish:
          id: blow
          state: OFF
      #- script.stop: timeout


binary_sensor:
  # Физический переключатель на вентиляторе
  - platform: gpio
    name: "Fan switch"
    id: $fan_switch_id
    pin:
      number: $pin_btn
      mode: INPUT_PULLUP
      inverted: True
    filters:
      delayed_on: 25ms
    on_press:
      then:
        - script.execute: fan_manual_state_on
    on_release:
      then:
        - script.execute: fan_manual_state_off


#Вентилятор
fan:
  - platform: speed
    output: fan_speed
    id: $fan_id
    name: "Fan"


#----
#    
#switch:
#  # Вкючить-выключить из HA не текстовой переменной, а переключателем (для голосовых команд).  
#  - platform: template
#    name: "AirControl Fan"
#    id: aircontrol_fan
#    icon: "mdi:door-open"
#    optimistic: true
#    restore_state: true
#    on_turn_on:
#      output.turn_on: relay1
#    on_turn_off:
#      output.turn_off: relay1
