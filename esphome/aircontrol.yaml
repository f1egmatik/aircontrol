esphome:
  name: aircontrol
  platform: ESP8266
  board: nodemcuv2

wifi:
  # Учетные данные Wi-Fi
  ssid: !secret wifi_ssid
  password: !secret wifi_pass

  # Включение резервной точки доступа (captive portal) на случай сбоя подключения к Wi-Fi
  ap:
    ssid: "Aircontrol Fallback Hotspot"
    password: "YHhbSejlDaIw"

captive_portal:

# Раскомментируйте строки ниже, для включения встроенного WEB-сервера
#web_server:
#  port: 80

# Включение ведения журнала
logger:
  # Необходимо для отключения журналирования через UART0
  baud_rate: 0

# Включение Home Assistant API
api:
  password: "esphome"

ota:
  password: "esphome"

# Выбор подключенного датчика
# Раскомментируйте необходимую строку
#
<<: !include common/mhz19.yaml
#<<: !include common/dht_am2302.yaml
#<<: !include common/hass_sensor.yaml

# Настройки выходов
output:
  # Выход Реле 1
  - platform: gpio
    id: relay_1
    pin:
      number: $pin_relay1
      mode: OUTPUT
      inverted: true

  # Выход Реле 2
  - platform: gpio
    id: relay_2
    pin:
      number: $pin_relay2
      mode: OUTPUT
      inverted: true

  # Фиктивный выход для переключения скоростей вентилятора
  - platform: template
    type: float
    id: fan_speed
    write_action:
      - if:
          condition:
            lambda: return (state < .25);
          then:
            - output.turn_off: relay_1
            - output.turn_off: relay_2
      - if:
          condition:
            lambda: return ((state >= .25) && (state < .50));
          then:
            - output.turn_on: relay_1
            - output.turn_off: relay_2
      - if:
          condition:
            lambda: return ((state >= .50) && (state < .75));
          then:
            - output.turn_off: relay_1
            - output.turn_on: relay_2
      - if:
          condition:
            lambda: return (state >= 0.75);
          then:
            - output.turn_on: relay_1
            - output.turn_on: relay_2

# Скрипты автоматизации
script:

  # Логика автоматизации
  - id: fan_automation
    then:
      - if:
          condition:
              not:
                - script.is_running: timeout
          then:
            - if:
                condition:
                  sensor.in_range:
                    id: $source_sensor_id
                    above: $bound_3
                then:
                  - fan.turn_on:
                      id: $fan_id
                      speed: 3
                else:
                  - if:
                      condition:
                        sensor.in_range:
                          id: $source_sensor_id
                          above: $bound_2
                      then:
                        - fan.turn_on:
                            id: $fan_id
                            speed: 2
                      else:
                        - if:
                            condition:
                              sensor.in_range:
                                id: $source_sensor_id
                                above: $bound_1
                            then:
                              - fan.turn_on:
                                  id: $fan_id
                                  speed: 1
                            else:
                              - fan.turn_off: $fan_id
            - script.stop: timeout
 
  # Таймер
  - id: timeout
    mode: restart
    then:
      - delay: $blow_timeout

binary_sensor:
  # Физический переключатель на вентиляторе
  - platform: gpio
    name: "Fan HW Switch"
    id: $fan_switch_id
    pin:
      number: $pin_btn
      mode: INPUT_PULLUP
      inverted: True
    filters:
      delayed_on: 25ms
    on_press:
      then:
        - fan.turn_on:
            id: $fan_id
            speed: 3
    on_release:
      then:
        - fan.toggle: $fan_id

#Вентилятор
fan:
  - platform: speed
    output: fan_speed
    id: $fan_id
    name: "Fan"
    speed_count: 3
    on_speed_set:
    - script.execute: timeout

