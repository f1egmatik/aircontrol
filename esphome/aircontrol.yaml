esphome:
  name: aircontrol
  platform: ESP8266
  board: nodemcuv2

wifi:
  # Учетные данные Wi-Fi
  ssid: !secret wifi_ssid
  password: !secret wifi_pass

  # Включение резервной точки доступа (captive portal) на случай сбоя подключения к Wi-Fi
  ap:
    ssid: "Aircontrol Fallback Hotspot"
    password: "YHhbSejlDaIw"

captive_portal:

# Раскомментируйте строки ниже, для включения встроенного WEB-сервера
#web_server:
#  port: 80

# Включение ведения журнала
logger:

# Включение Home Assistant API
api:
  password: "esphome"

ota:
  password: "esphome"


# Выбор подключенного датчика
# Раскомментируйте необходимую строку
#
<<: !include common/mhz19.yaml
#<<: !include common/dht_am2302.yaml


# Не обязательный текстовый сенсор, отображает текущий режим работы вентилятора
text_sensor:
  - platform: template
    name: "Fan speed"
    id: fanspeed
    icon: "mdi:fan"


# Настройки выходов
output:
  # Выход Реле 1
  - platform: gpio
    id: relay_1
    pin:
      number: $pin_relay1
      mode: OUTPUT
      inverted: true

  # Выход Реле 2
  - platform: gpio
    id: relay_2
    pin:
      number: $pin_relay2
      mode: OUTPUT
      inverted: true

  # Фиктивный выход для переключения скоростей вентилятора
  - platform: template
    type: float
    id: fan_speed
    write_action:
      - if:
          condition:
            lambda: return (state < .2);
          then:
            - output.turn_off: relay_1
            - output.turn_off: relay_2
            - lambda: |-
                id(fanspeed).publish_state("0");
      - if:
          condition:
            lambda: return ((state >= .2) && (state < .4));
          then:
            - output.turn_on: relay_1
            - output.turn_off: relay_2
            - lambda: |-
                id(fanspeed).publish_state("1");
      - if:
          condition:
            lambda: return ((state >= .4) && (state < .7));
          then:
            - output.turn_off: relay_1
            - output.turn_on: relay_2
            - lambda: |-
                id(fanspeed).publish_state("2");
      - if:
          condition:
            lambda: return (state >= 0.7);
          then:
            - output.turn_on: relay_1
            - output.turn_on: relay_2
            - lambda: |-
                id(fanspeed).publish_state("3");


# Скрипты автоматизации
script:

  # Вентилятор выключен
  - id: fan_auto_state_off
    then:
      - if:
          condition:
            switch.is_off: hass_control
          then:
            - if:
                condition:
                  - script.is_running: timeout30min
                then:
                  - delay: 20ms
                else:
                  - fan.turn_off: $fan_id
      
  # Первая скорость
  - id: fan_auto_state_1
    then:
      - if:
          condition:
            switch.is_off: hass_control
          then:
            - if:
                condition:
                  - script.is_running: timeout30min
                then:
                  - delay: 20ms
                else:
                  - fan.turn_on:
                      id: $fan_id
                      speed: LOW
                  - lambda: |-
                      id(fanspeed).publish_state("1");

  # Втарая скорость
  - id: fan_auto_state_2
    then:
      - if:
          condition:
            switch.is_off: hass_control
          then:
            - if:
                condition:
                  - script.is_running: timeout30min
                then:
                  - delay: 20ms
                else:
                  - fan.turn_on:
                      id: $fan_id
                      speed: MEDIUM

  # Третья скорость
  - id: fan_auto_state_3
    then:
      - switch.template.publish:
          id: hass_control
          state: OFF
      - fan.turn_on:
          id: $fan_id
          speed: HIGH
            

  # ВКЛ 30 минут
  - id: fan_manual_state_on
    then:
      - if:
          condition:
            - script.is_running: timeout30min
          then:
            - script.stop: timeout30min
      - switch.template.publish:
          id: hass_control
          state: OFF
      - fan.turn_on:
          id: $fan_id
          speed: HIGH
      - script.execute: timeout30min

  # ВЫКЛ 30 минут
  - id: fan_manual_state_off
    then:
      - if:
          condition:
            - script.is_running: timeout30min
          then:
            - script.stop: timeout30min
      - switch.template.publish:
          id: hass_control
          state: OFF
      - fan.turn_off: $fan_id
      - script.execute: timeout30min

  # Таймер 30 минут
  - id: timeout30min
    then:
      - delay: 30min


# Выполнение скриптов по условиям 
interval:
  - interval: 3sec
    then:
      - if:
          condition:
            sensor.in_range:
              id: $source_sensor_id
              below: $fan_turn_off_speed
          then:
            - script.execute: fan_auto_state_off
      - if:
          condition:
            sensor.in_range:
              id: $source_sensor_id
              above: $fan_speed_1_above
              below: $fan_speed_1_below
          then:
            - script.execute: fan_auto_state_1
      - if:
          condition:
            sensor.in_range:
              id: $source_sensor_id
              above: $fan_speed_2_above
              below: $fan_speed_2_below
          then:
            - script.execute: fan_auto_state_2
      - if:
          condition:
            sensor.in_range:
              id: $source_sensor_id
              above: $fan_speed_3_above
          then:
            - switch.template.publish:
                id: hass_control
                state: OFF
            - script.execute: fan_auto_state_3


switch:
  # Переключатель ручного управления
  - platform: template
    id: hass_control
    name: "Manual mode"
    turn_on_action:
      - switch.template.publish:
          id: hass_control
          state: ON
    turn_off_action:
      - switch.template.publish:
          id: hass_control
          state: OFF
      - script.stop: timeout30min
      
  - platform: template
    id: blow
    name: "Blow"
    turn_on_action:
      - script.execute: fan_manual_state_on


binary_sensor:
  # переключатель на вентиляторе
  - platform: gpio
    name: "Fan switch"
    id: $fan_switch_id
    pin:
      number: $pin_btn
      mode: INPUT_PULLUP
      inverted: True
    filters:
      delayed_on: 25ms
    on_press:
      then:
        - script.execute: fan_manual_state_on
    on_release:
      then:
        - script.execute: fan_manual_state_off


#Вентилятор
fan:
  - platform: speed
    output: fan_speed
    id: $fan_id
    name: "Fan"


#----
#    
#switch:
#  # Вкючить-выключить из HA не текстовой переменной, а переключателем (для голосовых команд).  
#  - platform: template
#    name: "AirControl Fan"
#    id: aircontrol_fan
#    icon: "mdi:door-open"
#    optimistic: true
#    restore_state: true
#    on_turn_on:
#      output.turn_on: relay1
#    on_turn_off:
#      output.turn_off: relay1
